module statix/runtime/pp

imports
  libstratego-lib

imports

  libstratego-gpp
  libspoofax/sdf/pp

  statix/runtime/-

  signatures/statix/runtime/-

  pp/statix/runtime/-

signature
  constructors
    Analysis : ScopeGraph -> Analysis // duplicate from statix/test/Result

rules

  parenthesize-Statix = fail

  pp-Statix-string(pp) =
    try(parenthesize-Statix)
    ; pp
    ; !V([], <id>)
    ; box2text-string(|120)

  pp-Statix-ATerm =
    pp-Statix-string(prettyprint-Statix-Stx-ATerm)

  pp-Statix-ScopeGraph =
    pp-Statix-string(prettyprint-Statix-Stx-ScopeGraph)

  pp-Statix-Properties =
    pp-Statix-string(prettyprint-Statix-Stx-Properties)

  pp-Statix-Diagnostics =
    pp-Statix-string(prettyprint-Statix-Stx-Diagnostics)

rules

  prettyprint-Statix-Stx-INT =
    where(is-int)
  ; ![S(<int-to-string>)]

  prettyprint-Statix-Stx-STRING =
    where(is-string)
  ; ![S(<id>)]

rules

// ATerm is a sort for any Stratego term. Pretty printing is generic, but specialized
// for Statix specific constructors such as scopes. This is achieved by the special
// pretty printing strategies here. The productions in statix/runtime/ATerm.sdf3 and
// strategies here must be kept in sync!


  // pretty-print strategy that can be injected into other sorts to allow printing
  // special Statix terms in those positions

  stx--prettyprint-term: _ -> <prettyprint-Statix-Stx-Var>
    where is-Statix-Stx-Var

  stx--prettyprint-term: _ -> <prettyprint-Statix-Stx-Scope>
    where is-Statix-Stx-Scope

  stx--prettyprint-term: _ -> <prettyprint-Statix-Stx-Occurrence>
    where prettyprint-Statix-Stx-Occurrence

  stx--prettyprint-term: _ -> <prettyprint-Statix-Stx-TermIndex>
    where prettyprint-Statix-Stx-TermIndex


  // extend generated strategy to treat native terms as constructors of ATerm
  // one for every special rule below
  // do not write as ` = is-int + is-string + ...`, as this breaks merging with generated rules

  is-Statix-Stx-ATerm: _ -> <is-int>
  is-Statix-Stx-ATerm: _ -> <is-string>
  is-Statix-Stx-ATerm: _ -> <is-list>


  // injections into ATerm that should not be handled generically
  // should cover all injections in syntax/ATerm.sdf3

  stx--is-ATerm-inj: _ -> <is-Statix-Stx-Var>
  stx--is-ATerm-inj: _ -> <is-Statix-Stx-Scope>
  stx--is-ATerm-inj: _ -> <is-Statix-Stx-Occurrence>
  stx--is-ATerm-inj: _ -> <is-Statix-Stx-TermIndex>


  // generic pretty-printing rules for ATerms

  prettyprint-Statix-Stx-ATerm:
      t1__ -> [ H([SOpt(HS(), "0")], [t1__']) ]
    where is-int
    with t1__' := <pp-one-Z(prettyprint-Statix-Stx-INT)> t1__

  prettyprint-Statix-Stx-ATerm:
      t1__ -> [ H([SOpt(HS(), "0")], [S("\""), t1__', S("\"")]) ]
    where is-string
    with t1__' := <pp-one-Z(prettyprint-Statix-Stx-STRING)> t1__

  prettyprint-Statix-Stx-ATerm:
      t1__ -> [ H([SOpt(HS(), "0")], [S("["), t1__', S("]")]) ]
    where is-list
    with t1__' := <pp-H-list(prettyprint-Statix-Stx-ATerm|", ")> t1__
    with <map(prettyprint-Statix-Stx-ATerm)> t1__

  prettyprint-Statix-Stx-ATerm:
      t1__#(t2__) -> [ H([SOpt(HS(), "0")], [t1__', S("("), t2__', S(")")]) ]
    where not(is-Statix-Stx-ATerm + stx--is-ATerm-inj)
    with t1__' := <pp-one-Z(prettyprint-Statix-Stx-STRING)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-Stx-ATerm|", ")> t2__


  // pretty-printing rule for analysis, that converts to a term with a scope graph

  prettyprint-Statix-Analysis: a -> <prettyprint-Statix-Analysis> a'
    where <stx--is-analysis> a
    with a' := Analysis(<stx--debug-scopegraph> a)
