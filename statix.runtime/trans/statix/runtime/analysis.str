module statix/runtime/analysis

imports

  libstratego-lib

  libspoofax/analysis/constraint
  libspoofax/core/language
  libspoofax/resource/path

  signatures/statix/runtime/-

  statix/runtime/ast
  statix/runtime/analysis/-
  statix/runtime/constraints
  statix/runtime/terms
  statix/runtime/pp

  statix/api

signature
  sorts
    Scope
    SolverResult
    Rule
    Integer
    Spec
    Solution
    Config
    WithConfig

    StatixLibrary

    CustomAnalysis
    CustomUnitAnalysis
    CustomFinalAnalysis

  constructors

    : list(string) -> Key

    Library : /*rootScopes*/List(Scope) * /*ownScopes*/List(Scope) * /*scopeGraph*/ScopeGraph -> StatixLibrary

    NoCustomAnalysis : CustomAnalysis

    FileSpec : List(String) * List(Label) * List(Label) * Label * List(Rule) * List(ID, Integer, Label) -> Spec
    Spec     : List(Label) * List(Label) * Label * List(Rule) * List(ID, Integer, Label) -> Spec
    Solution : List(Var, Term) * SolverResult -> Solution

    WithConfig : Config * Term -> WithConfig

    EOP : Label // duplicate from statix.lang


rules // spec

  stx--language-spec-by-name =
    MkSingleton
  ; language-resources(stx--module-path, stx--spec-imports)
  ; map(Snd)
  ; stx--merge-spec-aterms

  stx--local-spec-from-spec =
    ?spec
  ; stx--spec-imports
  ; project-resources(stx--module-path, stx--spec-imports)
  ; map(Snd)
  ; ![spec|<id>]
  ; stx--merge-spec-aterms


  stx--spec-imports = ?FileSpec(<id>, _, _, _, _, _)


  stx--mk-qualified-name(|""): name -> name

  stx--mk-qualified-name(|qname): name -> name'
    with if <elem> ('!', <explode-string> name) then
           name' := name
         else
           name' := $[[qname]![name]]
         end


  stx--merge-spec-aterms = foldr(stx--merge-spec-aterms-init, stx--merge-spec-aterms-step); stx--uniquify-spec

  stx--merge-spec-aterms-init = !Spec([], [], EOP(), [], [])

  stx--merge-spec-aterms-step: (spec1, spec) -> spec'
    with FileSpec(_, edge1*, data1*, eop, rule1*, ext1*) := spec1
       ; Spec(edge*, data*, eop, rule*, ext*) := spec
       ; spec' := Spec( <union> (edge1*, edge*)
                      , <union> (data1*, data*)
                      , eop
                      , <conc> (rule1*, rule*)
                      , <union> (ext1*, ext*)
                      )

rules

  // At 'link-time' generate unique names
  stx--uniquify-spec = Spec(id, id, id, stx--uniquify-rules, id)

  stx--uniquify-rules = scope-local-new(downup(where(try(stx--newname)), preserve-annos(try(stx--uniquify))))

  stx--newname = ?CExists(<id>, _); map(Var(local-newname))
  stx--newname = ?C(<id>, _); topdown(try(Var(local-newname)))

  stx--uniquify =
     stx--uniquify-exists
  <+ stx--uniquify-rule
  <+ stx--uniquify-wld

  stx--uniquify-exists: c@CExists(xs, _) -> c'
    with xs'  := <map(stx--pair-fresh-name)> xs
       ; c'   := <foldr(!c, stx--subst-fresh-name)> xs'

  stx--uniquify-rule: r@Rule(name, C(c-id, args), c) -> r'
    with xs'  := <collect-all(?Var(_)); map(stx--pair-fresh-name)> args
       ; r'   := <foldr(!r, stx--subst-fresh-name)> xs'

  stx--uniquify-rule: l@LLam(args, c) -> l'
    with xs'  := <collect-all(?Var(_)); map(stx--pair-fresh-name)> args
       ; l'   := <foldr(!l, stx--subst-fresh-name)> xs'

  stx--pair-fresh-name: v@Var(x){a*} -> (v, Var(<preserve-annos(local-newname)> x){a*})
  stx--subst-fresh-name: ((v_old, v_new), c) -> c'
     with c' := <topdown(preserve-annos(try(?v_old; !v_new)))> c

  stx--uniquify-wld: Wld(){a*} -> Var(v){a*}
    with v := <local-newname> "wld"

rules

  stx--module-path: name -> filename
    with filename := <stx--src-gen-file(|"statix", ".spec.aterm")> name

  stx--src-gen-file(|sub-dir, ext): name -> filename
    with filename := $[[<stx--src-gen-dir(|sub-dir)>]/[name][ext]]

  stx--src-gen-dir(|sub-dir): _ -> dirname
    with dirname := <project-srcgen-dir> sub-dir


rules // config

  // @type _ -> Config
  stx--project-config = prim("STX_project_config")

  // @type _ -> SolverMode
  stx--solver-mode = prim("STX_solver_mode")

  stx--log-level = stx--is-debug-custom-enabled < !"Info" + !"None"

  stx--is-debug-custom-enabled =
    prim("SG_is_debug_custom_enabled")

  stx--is-concurrent-enabled =
    prim("STX_is_concurrent_enabled")

rules // grouping

  stx--default-group-key: (resource, _) -> [resource]

  stx--no-grouping: (resource, ast) -> key
    with key := [<current-language-relative-source-or-include-path> resource]

rules // libraries

  stx--local-libs =
    !["stxlibs"]
  ; project-resources(stx--lib-path, is-list;filter(is-string))
  ; filter(not(?("stxlibs", _)))
 <+ ![]

  stx--lib-path: "stxlibs" -> "lib/stxlibs"
  stx--lib-path: name -> $[lib/[name].stxlib]

  stx--register-library(|scope, a) = prim("STX_register_library", scope, a)

rules // custom analysis

  stx--no-custom-unit-analysis  = !NoCustomAnalysis()
  stx--no-custom-final-analysis = !([], [], [], NoCustomAnalysis())

  stx--get-ast-analysis =
    stx--get-ast-resource
  ; stx--get-resource-analysis(stx--get-analysis)

  stx--get-ast-result =
    stx--get-ast-resource
  ; stx--get-resource-analysis(stx--get-result)

  stx--get-resource-analysis(extract-analysis) =
    get-resource-constraint-analysis
  ; extract-analysis

  stx--get-project-analyses(extract-analysis) =
    get-project-constraint-analyses
  ; map((id, extract-analysis))

rules // solver result transformations

  // @type SolverResult -> SolverResult
  stx--delays-as-errors(|config) = <prim("STX_delays_as_errors")> WithConfig(config, <id>)

  // @type SolverResult -> (SolverResult, [Error], [Warning], [Note])
  stx--extract-messages(|config) = <prim("STX_extract_messages")> WithConfig(config, <id>)

rules // analysis result accessors

  stx--get-analysis = fail

  stx--get-result = fail

rules // solver result accessors

  /**
   * @param a : Analysis
   * @type : (Scope * Label) -> [Term]
   */
  stx--get-scopegraph-data(|a) =
    prim("STX_get_scopegraph_data", a)

  /**
   * @param a : Analysis
   * @type : (Scope * Label) -> [Scope]
   */
  stx--get-scopegraph-edges(|a) =
    prim("STX_get_scopegraph_edges", a)

  /**
   * @type : Analysis -> Analysis
   */
  stx--is-analysis =
    prim("STX_is_analysis")

  /**
   * @type : Analysis -> Analysis
   */
  stx--analysis-has-errors =
    prim("STX_analysis_has_errors")

  /**
   * @type : Analysis -> ScopeGraph
   */
  stx--debug-scopegraph =
    prim("STX_debug_scopegraph")

  /**
   * @type : Analysis -> ScopeGraph
   */
  stx--get-scopegraph =
    prim("STX_get_scopegraph")

  stx--diff-scopegraphs(|s0) =
    prim("STX_diff_scopegraphs",s0)

  stx--get-occurrence-ns: StxOccurrence(ns, _, _) -> ns

  stx--get-occurrence-terms: StxOccurrence(_, ts, _) -> ts

rules // debug

  stx--debug-log(|msg) = id <+ debug(!msg)
