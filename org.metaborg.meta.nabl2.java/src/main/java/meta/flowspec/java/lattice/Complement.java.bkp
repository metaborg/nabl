package meta.flowspec.java;

import java.util.Collection;
import java.util.Iterator;

import org.pcollections.PSet;

public class Complement<E> implements PSet<E> {
    private PSet<E> complement;
    
    public Complement(PSet<E> complement) {
        this.complement = complement;
    }
    
    @Override
    public int size() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isEmpty() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean contains(Object o) {
        return !complement.contains(o);
    }

    @Override
    public Iterator<E> iterator() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Object[] toArray() {
        throw new UnsupportedOperationException();
    }

    @Override
    public <T> T[] toArray(T[] a) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean containsAll(Collection<?> c) {
        return c.stream().allMatch(o -> this.contains(o));
    }

    @Override
    public PSet<E> plus(E e) {
        if (complement.contains(e)) {
            return new Complement<>(complement.minus(e));
        } else {
            return this;
        }
    }

    @Override
    public PSet<E> plusAll(Collection<? extends E> list) {
        PSet<E> newComplement = complement.minusAll(list);
        if (newComplement == complement) {
            return this;
        } else {
            return new Complement<>(newComplement);
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public PSet<E> minus(Object e) {
        return new Complement<>(this.complement.plus((E) e));
    }

    @SuppressWarnings("unchecked")
    @Override
    public PSet<E> minusAll(Collection<?> list) {
        return new Complement<>(this.complement.plusAll((Collection<? extends E>) list));
    }

    @Override
    public boolean add(E o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean remove(Object o) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean addAll(Collection<? extends E> c) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean removeAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean retainAll(Collection<?> c) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException();
    }
}