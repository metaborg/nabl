module statix/lang/Core

imports

  statix/lang/Common

template options

  keyword -/- [a-zA-Z0-9\_\-\']


/******************************************************************
 * Modules                                                        *
 ******************************************************************/

context-free syntax

  Module.Module = <
    module <ModuleId>

    <{Section "\n\n"}*>
  > {longest-match}

  Section.Imports = <
    imports
      <{Import "\n"}*>
  >

  Import.Import = ModuleId

  Section.Signature = <
    signature

      <{Signature "\n\n"}*>
  > {longest-match}

  Section.Rules = <
    rules

      <{Rule "\n\n"}*>
  > {longest-match}

lexical syntax

  ModuleId = Keyword {reject}

  Keyword = "module" | "imports" | "signature" | "rules"


/******************************************************************
 * User Constraints                                               *
 ******************************************************************/

context-free syntax

  Signature.Constraints = <
    constraints
      <{CDecl "\n"}*>
  > {longest-match}

  CDecl.CDecl      = [[CInd][ConstraintId] : [Type]]

  CInd.InductiveC   =
  CInd.CoinductiveC = <coinductive >

  Rule.Rule = <
    <RuleName><RuleHead> :-
      <Constraint>.
  >

  RuleName.NoName = <>
  RuleName.Name = <
    [<STRID>]
  >
  RuleHead.C = [[ConstraintId]([{Term ", "}*])]

  Constraint.C = [[ConstraintId]([{Term ", "}*])[Message]]

  HoConstraint.LLam = <{ <{Term ", "}*> :- <Constraint> }>

lexical syntax

  ConstraintId = LCID
  ConstraintId = Keyword {reject}

  Keyword = "constraints" | "coinductive"


/******************************************************************
 * Base Constraints                                               *
 ******************************************************************/

context-free syntax

  Constraint.CTrue  = <true>
  Constraint.CFalse = <false<Message>>

  Constraint         = <(<Constraint>)> {bracket}

  Constraint.CConj   = <
    <Constraint>,
    <Constraint>
  > {right}

  Constraint.CNew    = <new <{Var " "}+>>

  Constraint.CEqual   = [[Term] == [Term][Message]]
  Constraint.CInequal = [[Term] != [Term][Message]]

  Constraint.CTry = [try { [Constraint] }[Message]]

  Constraint.CExists = [
    {[{Var " "}*]}
      [Constraint]
  ]

context-free priorities

  // Does this give longest-match behavior? Putting longest-match on CExists
  // seemed to break parsing of exists with conj body in parenthesis.
  Constraint.CConj > Constraint.CExists

lexical syntax

  Keyword = "true" | "false" | "new" | "try"


/******************************************************************
 * AST Constraints                                                *
 ******************************************************************/

context-free syntax

  Constraint.CAstId       = <astId(<Term>, <Term>)>
  Constraint.CAstProperty = <@<TermOrTermIndex>.<AstProperty> <AstPropertyOp> <Term>>

  AstProperty.Prop = AstPropertyId

  AstPropertyOp.Set = ":="
  AstPropertyOp.Add = "+="

  TermOrTermIndex = Var

lexical syntax

  AstPropertyId = ID
  AstPropertyId = Keyword {reject}

  Keyword = "astId"


/******************************************************************
 * Relations                                                      *
 ******************************************************************/

context-free syntax

  Signature.Relations = <
    relations
      <{RelDecl "\n"}*>
  > {longest-match}

  RelDecl.RelDecl = <<Label> : <Type>>

  RelRef = Label

  Rule = <relation <RelDecl>>

syntax

  Constraint-CF.CTellRel = "!" RelRef-CF "[" CommaTerms-CF "]" LAYOUT?-CF "in" LAYOUT?-CF Term-CF

lexical syntax

  RelationId = ID
  RelationId = Keyword {reject}

  Keyword = "relations" | "relation" | "in"


/******************************************************************
 * Scope Graph                                                    *
 ******************************************************************/

context-free syntax

  Signature.NameResolution = <
    name-resolution
      <{ResolutionParam "\n"}*>
  > {longest-match}

  // labels

  ResolutionParam.Labels = <labels <{Label " "}*>>

  Label.Label = RelationId

  EdgeRef     = Label
  EdgeRef.EOP = "$"

  LabelPairs          = <<{LabelPair ", "}*>>
  LabelPair.LabelPair = [[EdgeRef] < [EdgeRef]]
  LabelOrd            = LabelPairs

  LabelRE.Empty      = <0>
  LabelRE.Epsilon    = <e>
//LabelRE.Any        = <.>
  LabelRE            = Label
  LabelRE.Closure    = <<LabelRE>*>
  LabelRE.Neg        = <~<LabelRE>>
  LabelRE.Concat     = <<LabelRE> <LabelRE>>     {right}
  LabelRE.And        = <<LabelRE> & <LabelRE>>   {left}
  LabelRE.Or         = <<LabelRE> | <LabelRE>>   {left}
  LabelRE            = <(<LabelRE>)>             {bracket}

context-free priorities

    { LabelRE.Neg LabelRE.Closure }
  > LabelRE.Concat
  > LabelRE.And
  > LabelRE.Or

context-free syntax

  Term = Path

  Path = PathLit

syntax

  PathLit-CF.PathEmpty = "_PathEmpty" "(" LAYOUT?-CF Term-CF LAYOUT?-CF ")"
  PathLit-CF.PathStep  = "_PathStep" "(" LAYOUT?-CF Term-CF LAYOUT?-CF "," LAYOUT?-CF Term-CF LAYOUT?-CF "," LAYOUT?-CF Term-CF LAYOUT?-CF ")"

  Constraint-CF.CTellEdge = Term-CF LAYOUT?-CF "-" Label-CF "->" LAYOUT?-CF Term-CF

lexical syntax

  NamespaceId = UCID

  RelationId = "e" {reject}        // ambiguous with empty regex
  RelationId = Keyword {reject}    // ambiguous with signature keywords

  Keyword = "namespaces" | "name-resolution" | "labels" | "namespace"


/******************************************************************
 * Resolve & Query
 ******************************************************************/

context-free syntax

  Constraint = CResolveQuery

  CResolveQuery.CResolveQuery = [
    query [QueryTarget]
     [QueryFilter]
     [QueryMin]
     [QueryProject]
      in [Term] |-> [Term][Message]
   ]

  QueryTarget.EOP = "()"
  QueryTarget     = RelRef

  QueryFilter.Filter   = < filter <LabelRE> and <HoConstraint>>
  QueryMin.Min         = < min <LabelOrd> and <HoConstraint>>
  QueryProject.Project = < project <ProjectTarget>>

  ProjectTarget.PFull       = <*>
  ProjectTarget.PTargetData = <dst, $>
  ProjectTarget.PData       = <$>

lexical syntax

  Keyword = "query" | "in" | "filter" | "min" | "project" | "and"


/******************************************************************
 * Sorts & Constructors                                           *
 ******************************************************************/

context-free syntax

  Signature.Sorts = <
    sorts
      <{SortDecl "\n"}*>
  > {longest-match}

  Signature.Constructors = <
    constructors
      <{OpDecl "\n"}*>
  > {longest-match}

  SortDecl.SortDecl  = SortId
  SortDecl.SortAlias = <<SortId> = <SortRef>>

  Sort.SimpleSort = SortId

  SortRef                = Sort
  SortRef.ListSort       = <list(<SortRef>)>
  SortRef.Tuple0Sort     = <( )>
  SortRef.TupleNSort     = <(<SortRef> * <{SortRef " * "}+>)>
  SortRef.IntSort        = "int"
  SortRef.StringSort     = "string"
  SortRef.PathSort       = "path"
  SortRef.LabelSort      = "label"
  SortRef.OccurrenceSort = "occurrence"
  SortRef.ScopeSort      = "scope"
  SortRef.AstIdSort      = "astId"
  SortRef                = <(<SortRef>)> {bracket}

  OpDecl.OpDecl  = <<OpId> : <OpSort>>

  OpSort.ConstOp = Sort
  OpSort.ArrowOp = [[{SortRef " * "}+] -> [Sort]]

  Type.SimpleType = [[{SortRef " * "}*]]

lexical syntax

  SortId = STRID
  SortId = Keyword {reject}
  SortId = "list" | "int" | "string" | "occurrence" | "scope" | "path" | "label" | "astId" {reject}

  OpId = STRID
  OpId = Keyword {reject}

  Keyword = "sorts" | "constructors"


/******************************************************************
 * Terms                                                          *
 ******************************************************************/

context-free syntax

  Var.Var = VARID
  Var.Wld = <_>

  Int.Int = INT

  Term            = Var
  Term            = Int
  Term            = Str
  Term.List       = <[<{Term ", "}*>]>
  Term.ListTail   = <[<{Term ", "}*>|<Term>]>
  Term.Tuple0     = <( )>
  Term.TupleN     = <(<Term>, <{Term ", "}+>)>
  Term.As         = <<Var>@<Term>>
  Term.Ascribe    = <<Term> : <SortRef>>
  Term            = <(<Term>)> {bracket}

  CommaTerms = <<{Term ", "}*>>
  SpaceTerms = <<{Term " "}*>>

context-free priorities

    Term.As
  > Term.Ascribe

syntax

  Term-CF.Op         = OpId-LEX "(" LAYOUT?-CF CommaTerms-CF LAYOUT?-CF ")"

  Str-CF.Str        = "\"" StrChars-LEX "\""

lexical syntax

  StrChars   = StrChar*
  StrChar    = ~[\"\\\t\r\n]
  StrChar    =  "\\\"" | "\\\\" | "\\t" | "\\r" | "\\n"

lexical restrictions

  StrChars -/- ~[\"]


/******************************************************************
 * Arithmetic                                                          *
 ******************************************************************/

syntax

  Constraint-CF.CArith = ArithExp-CF LAYOUT?-CF "#" ArithOp-CF LAYOUT?-CF ArithExp-CF LAYOUT?-CF Message-CF

  ArithOp-CF.Equal            = "="
  ArithOp-CF.NotEqual         = "\\="
  ArithOp-CF.GreaterThanEqual = ">="
  ArithOp-CF.LessThanEqual    = "=<"
  ArithOp-CF.GreaterThan      = ">"
  ArithOp-CF.LessThan         = "<"

context-free syntax

  ArithExp     = Int
  ArithExp     = Var
  ArithExp.Add = <<ArithExp> + <ArithExp>> {left}
  ArithExp.Mul = <<ArithExp> * <ArithExp>> {left}
  ArithExp.Sub = <<ArithExp> - <ArithExp>> {left}
  ArithExp.Min = <min(<ArithExp>, <ArithExp>)>
  ArithExp.Max = <max(<ArithExp>, <ArithExp>)>
  ArithExp.Mod = <<ArithExp> mod <ArithExp>> {left}
  ArithExp.Div = <<ArithExp> div <ArithExp>> {left}
  ArithExp     = <(<ArithExp>)> {bracket}

context-free priorities

    {left: ArithExp.Mul ArithExp.Div ArithExp.Mod}
  > {left: ArithExp.Add ArithExp.Sub}


/******************************************************************
 * Messages                                                       *
 ******************************************************************/

context-free syntax

  Message.NoMessage =
  Message.Message   = < | <MessageKind> <MessageContent> <MessageOrigin>>

  MessageKind.Error      = <error>
  MessageKind.Warning    = <warning>
  MessageKind.Note       = <note>

syntax

  MessageContent-CF.Formatted = "$[" MessageContentPart-CF* "]"

  MessageOrigin-CF.NoOrigin =
  MessageOrigin-CF.Origin   = "@" Var-CF

context-free syntax

  MessageContent.NoMessage =
  MessageContent           = Str

  MessageContentPart.Term = <[<Term>]>
  MessageContentPart.Text = MessageChars

lexical syntax

  MessageChars = MessageChar+
  MessageChar  = ~[\[\]\\\t\r\n]
  MessageChar  = "\\[" | "\\]" | "\\n" | "\\r" | "\\t" | "\\\\"

lexical restrictions

  MessageChars -/- ~[\[\]]
