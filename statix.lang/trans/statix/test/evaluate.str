module statix/test/evaluate

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/normalize
  statix/lang/precompile

  statix/runtime/-

  signatures/statix/test/-
  pp/statix/test/-
  statix/test/-

  statix/api
  statixruntime
  statix/runtime/-

rules

  editor-evaluate-traditional:
      (_, _, Module(_, _), path, project-path) -> None()

  editor-evaluate-traditional:
      (_, _, ast@Test(_, _), path, project-path) -> (filename, result)
    with result   := <evaluate-traditional;pp-Statix-string(prettyprint-Statix-TestResult)> ast;
         filename := <guarantee-extension(|"stxresult")> path

rules

  editor-evaluate-concurrent:
      (_, _, Module(_, _), path, project-path) -> None()

  editor-evaluate-concurrent:
      (_, _, ast@Test(_, _), path, project-path) -> (filename, result)
    with result   := <evaluate-concurrent;pp-Statix-string(prettyprint-Statix-TestResult)> ast;
         filename := <guarantee-extension(|"stxresult")> path

rules

  editor-evaluation-pair:
      (_, _, Module(_, _), path, project-path) -> None()

  editor-evaluation-pair:
      (_, _, ast@Test(_, _), path, project-path) -> (filename, result)
    with result   := <build-evaluation-pair> ast;
         filename := <guarantee-extension(|"evalpair.aterm")> path

  build-evaluation-pair: ast@Test(_, _) -> (body', spec')
    with a      := <nabl2-get-ast-analysis> ast;
         CustomAnalysis(ext) := <nabl2-get-custom-analysis> a;
         ast'   := <normalize(|a); precompile(|a)> ast;
         Test(body, _) := ast';
         spec   := <core-ast-to-spec-aterm(|a)> (ast', ext);
         spec'  := <stx--local-spec-from-spec> spec;
         body'  := <qualify-names(|a);eliminate-all;stx--index-ast(|""/*path*/)> body

signature
  constructors
    SUCCEEDS : TestResult
    FAILS    : TestResult
    WARNS    : TestResult

rules

  evaluate-test: ast -> result
    with if EvalResult(_, [], w*, n*) := <evaluate-traditional> ast then
           if [] := w* then
             result := SUCCEEDS()
           else
             result := WARNS()
           end
         else
           result := FAILS()
         end

  evaluate-traditional = evaluate(fail)

  evaluate-concurrent = evaluate(id)

  evaluate = evaluate(stx--is-concurrent-enabled)

  evaluate(concurrent): ast@Test(_, _) -> result
    with a      := <nabl2-get-ast-analysis> ast;
         CustomAnalysis(ext) := <nabl2-get-custom-analysis> a;
         ast'   := <normalize(|a); precompile(|a)> ast;
         Test(body, _) := ast';
         spec   := <core-ast-to-spec-aterm(|a)> (ast', ext);
         spec'  := <stx--local-spec-from-spec> spec;
         config := <stx--project-config>;
         level  := <stx--test-log-level> config;
         body'  := <qualify-names(|a);eliminate-all;stx--index-ast(|""/*path*/)> body;
         s@Solution(_, a') := <solve(concurrent|spec', level)> body';
         (error*, warning*, note*) := <stx--delays-as-errors(|config);stx--extract-messages(|config)> a';
         result := EvalResult(s, error*, warning*, note*)

  solve(concurrent|spec', level) = concurrent < cstx--solve-constraint(|spec', level) + stx--solve-constraint(|spec', level)

  stx--test-log-level = prim("STX_test_log_level")

rules

  compile-test-body(|fspecs* /* <= compiled modules */): ast@Test(_, _) -> (constraintTerm, specTerm)
    with
      a                   := <nabl2-get-ast-analysis> ast;
      CustomAnalysis(ext) := <nabl2-get-custom-analysis> a;
      ast'                := <normalize(|a); precompile(|a)> ast;
      Test(body, _)       := ast';
      constraintTerm      := <qualify-names(|a);eliminate-all;stx--index-ast(|"")> body;
      spec                := <core-ast-to-spec-aterm(|a)> (ast', ext);
      specTerm            := <stx--merge-spec-aterms> [spec | fspecs*]

  prettyprint-test-result = pp-Statix-string(prettyprint-Statix-TestResult)
