module statix/lang/scope-extension/sugar

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/scope-extension/-

rules // collect extension constraints

  ext-constraints: CDeriveMap(x, x', lift*) -> c*
    where r-ref := <ext-get-constraint-ref> x
        ; r-ref' := <ext-get-constraint-ref> x'
        ; c* := <add-indices;filter(ext-lift-constraints(|r-ref, r-ref'));concat> lift*

  ext-constraints: FDeriveMap(x, x', inlift*, outlift) -> c*
    where r-ref := <ext-get-constraint-ref> x
        ; r-ref' := <ext-get-constraint-ref> x'
        ; lift* := <conc> (inlift*, [outlift])
        ; c* := <add-indices;filter(ext-lift-constraints(|r-ref, r-ref'));concat> lift*

  ext-lift-constraints(|r-ref, r-ref'): (i, l@IdLift()) -> c*
    where c* := [ ExtProvides(ExtParam(r-ref, i), ExtParam(r-ref', i), l)
                , ExtRequires(ExtParam(r-ref, i), ExtParam(r-ref', i), l)
                ]

  ext-lift-constraints(|r-ref, r-ref'): (i, lift) -> c*
    where not(IdLift() := lift)
        ; c* := [ExtIsCovered(ExtParam(r-ref', i), lift)]


  ext-constraints: Rule(_, F(x, inparam*, outparam), _) -> c*
    where r-ref := <ext-get-constraint-ref> x
        ; ps := <conc> (inparam*, [outparam])
        ; c-param* := <ext-params-constraints(|r-ref)> ps
        ; c-decl* := <ext-non-unique-decls-constraints> ps
        ; c* := <conc> (c-param*, c-decl*)

  ext-param-constraints(|r-ref): (i, n@NewOp()) -> (n, c*)
    where c* := [ ExtProvides(ExtParam(r-ref, i), ExtAll(), n) ]


  ext-constraints: t@COp(x, args) -> c*
    where t-ref := <ext-get-term-ref> t
        ; r-ref := <ext-get-constraint-ref> x
        ; c-in*  := <ext-args-constraints(|r-ref)> args
        ; c-out* := [ExtIsCovered(t-ref, t)]
        ; c* := <conc> (c-in*, c-out*)


  ext-get-term-ref: COp(x, args) -> ExtParam(r-ref, i)
    where r-ref := <ext-get-constraint-ref> x
        ; i := <length;inc> args

