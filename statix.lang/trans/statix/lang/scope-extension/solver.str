module statix/lang/scope-extension/solver

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/scope-extension/-

  pp/statix/lang/-
  statix/lang/pp
  statix/runtime/pp

signature
  sorts SetOp constructors
    Union : List(ExtSet) -> SetOp
    Intersection : List(ExtSet) -> SetOp

rules

  external set-fixed-point(|base)

rules

  solve-ext-constraints: c* -> (ext, e*)
    with id

       ; provide-eq* := < filter(\ ExtProvides(v, s, _) -> (v, s) \)
                        ; group-by(Fst,Snd)
                        ; map(provide-combine)
                        ; ext-log(prettyprint-Statix-ExtEqs|"provide eqs:")
                        ; bottomup(try(provide-to-list))
                        > c*
       ; provides* := < set-fixed-point(|<provide-base>)
                      ; filter(not(?(_, [])))
                      ; map((id, try(list-to-provide)))
                      > provide-eq*
       ; ext-log(prettyprint-Statix-ExtEqs|"provides:")

       ; require-eq* := < filter(\ ExtRequires(v, s, _) -> (v, s) \)
                          // do not propagate requires of local variables to parameters
                          // if they are locally covered already
                        ; filter(not(\ (ExtParam(_, _), v@ExtVar(_)) -> <id> where <lookup> (v, provides*) \))
                        ; group-by(Fst,Snd)
                        ; map(require-combine)
                        ; ext-log(prettyprint-Statix-ExtEqs|"require eqs:")
                        ; bottomup(try(require-to-list))
                        > c*
       ; requires* := < set-fixed-point(|<require-base>)
                      ; filter(not(?(_, [])))
                      ; map((id, try(list-to-require)))
                      > require-eq*
       ; ext-log(prettyprint-Statix-ExtEqs|"requires:")

         // errors if requires != {} and provides == {}
       ; cover* := <filter(\ ExtIsCovered(s, o) -> (s, o) \)> c*
       ; map(Fst);ext-log(prettyprint-Statix-ExtSets|"cover:")
       ; uncovered* := <raw-diff> (<map(Fst)> requires*, <map(Fst)> provides*)
       ; ext-log(prettyprint-Statix-ExtSets|"uncovered:")
       ; missing* := <filter(where(<raw-elem> (<Fst>, uncovered*)))> cover*
       ; map(Fst);ext-log(prettyprint-Statix-ExtSets|"missing:")
       ; uncovered-e* := <filter(ext-uncovered-error(|missing*, requires*))> c*

         // errors if escapes and requries != {} or provides != {}
       ; escape-e* := <filter(ext-escape-error(|provides*, requires*))> c*

       ; e* := <conc> (uncovered-e*, escape-e*)

       ; ext := <filter(ext-spec-entries);concat> requires*


  ext-uncovered-error(|missing*, requires*) : ExtRequires(v, s, o) -> (t, msg)
    where o' := <raw-lookup> (v, missing*)
        ; lbls := <ext-get-nonempty(|requires*)> s
    with lbls-msg := <pp-Statix-string(prettyprint-Statix-ExtOp)> lbls
       ; msg := $[Scope missing permission to be extended with [lbls-msg]]
       ; t := <if ?ExtVar(_) then !o else !o' end> v


  ext-escape-error(|provide*, require*): ExtProvidesEsc(v, s, o) -> (o, msg)
    where <ext-get-nonempty(|provide*)> s
    with msg := $[Scope creation crosses barrier]

  ext-escape-error(|provide*, require*): ExtRequiresEsc(v, s, o) -> (o, msg)
    where lbls := <ext-get-nonempty(|require*)> s
    with lbls-msg := <pp-Statix-string(prettyprint-Statix-ExtOp)> lbls
       ; msg := $[Scope crosses barrier when extended with [lbls-msg]]


  ext-get-nonempty(|values*): ExtAll() -> <id>
  ext-get-nonempty(|values*): ExtLit([_|_]) -> <id>
  ext-get-nonempty(|values*): v@ExtVar(_) -> <raw-lookup> (v, values*)
  ext-get-nonempty(|values*): v@ExtParam(_, _) -> <raw-lookup> (v, values*)


  ext-spec-entries: (ExtParam(d, i), ExtLit(lbls)) -> entry*
    where x := <ext-get-name> d
       ; entry* := <map(\ lbl -> (x, i, lbl) \)> lbls


  provide-base = ![()]
  provide-combine: (p@ExtParam(_, _), components) -> (p, Intersection(components))
  provide-combine: (p@ExtVar(_), components) -> (p, Union(components))
  provide-to-list: ExtAll()  -> <provide-base>
  provide-to-list: ExtNone() -> []
  list-to-provide: [] -> ExtNone()
  list-to-provide: [()] -> ExtAll()

  require-base = ![]
  require-combine: (p@ExtParam(_, _), components) -> (p,  Union(components))
  require-combine: (p@ExtVar(_), components) -> (p, Union(components))
  require-to-list: ExtLit(labels) -> labels
  list-to-require: labels -> ExtLit(labels)
    where is-list
