module statix/lang/normalize/relations

imports

  libspoofax/term/annotation
  libspoofax/term/origin

  nabl2/shared/vars
  nabl2/api

  signatures/statix/lang/-
  statix/lang/statics/-
  statix/lang/util
  statix/lang/normalize/util

rules

  // normalize functional relations
  // after lambda's, after normalizing queries

  normalize-functional-relations =
    nabl2-custom-analysis-info-msg(|"| Normalize functional relations...");
    normalize-in-sections(normalize-functional-reldecl);
    bottomup(try(normalize-functional-query))


  normalize-functional-reldecl:
      RelDecl(x, t){a*} -> decl*
    where FunType(_, _) := t
    with ty'   := <norm-get-ast-type;fun-to-pred-type> t;
         t'    := <fun-to-pred-type;norm-set-ast-type(|ty')> t;
         decl* := [RelDecl(x, t'){a*}]
      <+ decl* := []

  normalize-functional-query:
      c@CResolveQuery(rel, Filter(wf, lwf), Min(ord, lord), prj, st, pts, msg) -> c'
    where ty@FUN(in_tys, out_ty) := <norm-get-ast-type> rel
    with ty'   := <fun-to-pred-type> ty;
         rel'  := <norm-set-ast-type(|ty')> rel;
         lwf'  := <normalize-functional-wf(|in_tys,out_ty)> lwf;
         lord' := <normalize-functional-ord(|in_tys,out_ty)> lord;
         c'    := CResolveQuery(rel', Filter(wf, lwf'), Min(ord, lord'), prj, st, pts, msg)
      <+ c' := <fail-C>

  normalize-functional-wf(|in_tys,out_ty): LLam([p], c) -> wf
   with (p', vs, c*) := <normalize-functional-pattern(|in_tys,out_ty)> p;
        c' := <mk-CExists>(vs, <list-to-conj(|c)> c*);
        wf := <mk-LLam>([p'], c')
     <+ wf := <empty-LabelRE>

  normalize-functional-ord(|in_tys,out_ty): LLam([p1, p2], c) -> ord
   with (p1', vs1, c1*) := <normalize-functional-pattern(|in_tys,out_ty)> p1;
        (p2', vs2, c2*) := <normalize-functional-pattern(|in_tys,out_ty)> p2;
        vs  := <conc> (vs1, vs2);
        c'  := <mk-CExists>(vs, <conc;list-to-conj(|c)> (c1*, c2*));
        ord := <mk-LLam>([p1', p2'], c')
     <+ ord := <empty-LabelOrd>


  normalize-functional-pattern(|in_tys,out_ty): p -> (p', vs, c*)
    where wld := <mk-Wld(|out_ty)>;
          if in_ps := <match-terms(|in_tys)> p then
            p' := <conc;mk-Tuple>(in_ps, [wld]);
            vs := [];
            c* := []
          else
            us := <mk-fresh-Vars(|"u")> in_tys;
            p' := <conc;mk-Tuple>(us, [wld]);
            vs := <all-vars> p;
            c* := [CEqual(<mk-Tuple>(us), p, NoMessage())]
          end

  match-terms(|tys): t -> ts
    where if [] := tys then
            ts := []
          else if [_] := tys then
              ts := <![<id>]> t
            else
              ts := <?Tuple(<id>)> t
            end
          end
