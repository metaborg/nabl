module statix/lang/normalize/hoconstraints

imports

  libspoofax/term/annotation
  libspoofax/term/origin

  nabl2/shared/vars
  nabl2/api

  signatures/statix/lang/-
  statix/lang/normalize/util
  statix/lang/statics/-
  statix/lang/util

rules

  // normalize all higher-order constraint forms to lambda's

  normalize-ho-constraints =
    nabl2-custom-analysis-info-msg(|"| Normalize higher-order constraints...");
    bottomup(try(replace-ho-constraint))


  replace-ho-constraint: l@LTrue() -> lam
    with PRED(tys) := <norm-get-ast-type> l;
         ps := <mk-Wlds> tys;
         lam := <mk-LLam>(ps, CTrue())
      <+ lam := <fail-LLam>

  replace-ho-constraint: l@LFalse() -> lam
    with PRED(tys) := <norm-get-ast-type> l;
         ps := <mk-Wlds> tys;
         lam := <mk-LLam>(ps, CFalse(NoMessage()))
      <+ lam := <fail-LLam>

  replace-ho-constraint: l@LC(x) -> lam
    with PRED(tys) := <norm-get-ast-type> l;
         ps := <mk-seq-Vars(|"t")> tys;
         lam := <mk-LLam>(ps, C(x, ps, NoMessage()))
      <+ lam := <fail-LLam>

  replace-ho-constraint: l@EQ(t) -> lam
    with PRED([ty]) := <norm-get-ast-type> l;
         p   := <mk-fresh-Var(|ty)> "t";
         lam := <mk-LLam>([p], CEqual(p, t, NoMessage()))
      <+ lam := <fail-LLam>

rules

  // Detect most general patterns and replace them with a single wildcard.
  // This allows the solver to determine that some predicates are always true
  // without knowing anything about the types. For example { _ :- true } is
  // always true. But given the type (T * U) the lambda { (_, _) :- true } is
  // also always true. However, that is impossible to conclude without knowing
  // the type.

  normalize-lambda-patterns =
    nabl2-custom-analysis-info-msg(|"| Normalize lambda patterns...");
    bottomup(try(generalize-lambda-pattern))

  generalize-lambda-pattern:
       l@LLam(ps, c){a*} -> lam
     where <is-linear> ps // non-linear patterns are not most-general!
         ; tys := <norm-get-ast-type;in-types> l
         ; free-vars := <free-constraint-vars> c
         ; wld-vars := <raw-diff> (<all-vars> ps, free-vars)
         ; wld-wlds := <map(norm-get-ast-type);mk-Wlds> wld-vars
         ; wld-sbs := <zip> (wld-vars, wld-wlds)
         ; ps' := <substitute(is-var)> (wld-sbs, ps)
         ; ps'' := <zip(most-general-pattern<+Snd)> (ps', tys)
         ; lam := <mk-LLam>(ps'', c)

  is-linear = <eq> (<collect-all(is-var, conc);length>, <collect-all(is-var, raw-union);length>)

  most-general-pattern: (Wld(){a*}, _) -> Wld(){a*}
  most-general-pattern: (Tuple(ps){a*}, TUPLE(tys)) -> p{a*}
    where ps' := <zip(most-general-pattern<+Fst)> (ps, tys)
    with if <map(?Wld())> ps' then
           p := Wld()
         else
           p := Tuple(ps')
         end
  most-general-pattern: (p{a*}, _) -> p{a*}

