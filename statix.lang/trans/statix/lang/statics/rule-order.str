module statix/lang/statics/rule-order

imports

  libspoofax/resource/path
  libspoofax/term/origin

  signatures/statix/lang/-

  statix/lang/util
  statix/lang/pp

  nabl2/api

rules

  detect-overlapping-rules(|a) =
    nabl2-get-symbolic-goals(|a)
  ; filter(solve-pattern-constraint(|a))
  ; concat


  solve-pattern-constraint(|a): DistinctPatterns(rule*) -> e*
    where c-rule* := < filter(where(nabl2-is-ground))
                     ; group-by(get-rule-constraint(|a), id)
                     > rule*
        ; e* := <map(Snd;distinct-patterns(|a));concat> c-rule*

  distinct-patterns(|a): rule* -> e*
    with o-rule* := <map(\ r -> (r, <filter(where(<not(raw-eq);rule-pattern-cmp(|a)> (r, <id>)))> rule*) \)> rule*
       ; e* := <filter(distinct-errors(|a))> o-rule*

  distinct-errors(|a): (rule, rule*) -> e
    where head        := <get-rule-head(|a)> rule
        ; head*@[_|_] := <filter(get-rule-head(|a))> rule*
        ; head-str := <local-heads-to-string> [head]
        ; heads-str := <local-heads-to-string> head*
        ; msg := $[Rule pattern equivalent to [heads-str]]
        ; e := (head, msg)


  solve-pattern-constraint(|a): NoDuplicatePatterns(rule*, in-rule*, origin) -> e*
    where c-rule* := < filter(where(nabl2-is-ground))
                     ; group-by(get-rule-constraint(|a), id)
                     > rule*
        ; c-in-rule* := < filter(where(nabl2-is-ground))
                        ; group-by(get-rule-constraint(|a), id)
                        > in-rule*
        ; e* := < join( where((Fst, Fst);raw-eq)
                      ; (Snd,Snd)
                      )
                ; map(no-duplicate-patterns(|a,origin))
                ; concat
                > (c-rule*, c-in-rule*)

  no-duplicate-patterns(|a, origin): (rule*, in-rule*) -> e*
    with dup-rule* := <map(\ r -> (r, <filter(where(<rule-pattern-cmp(|a)> (r, <id>)))> in-rule*) \)> rule*
       ; e* := <filter(duplicate-error(|a, origin))> dup-rule*

  duplicate-error(|a, origin): (rule, rule*) -> e
    where head        := <get-rule-head(|a)> rule
        ; head*@[_|_] := <filter(get-rule-head(|a))> rule*
        ; if () := origin then
            heads-str := <imported-heads-to-string> head*
          ; msg := $[Rule pattern is equivalent to [heads-str]]
          ; e := (head, msg)
          else
            head-str := <imported-heads-to-string> [head]
          ; heads-str := <imported-heads-to-string> head*
          ; msg := $[Pattern of imported rule [head-str] is equivalent to [heads-str]]
          ; e := (origin, msg)
          end


  local-heads-to-string: head* -> heads-str
    with head-str* := <map(!$[`[<pp-partial-Statix-string>]' at line [<origin-line;inc;int-to-string>]])> head*
       ; heads-str := <separate-by(|", ");concat-strings> head-str*

  imported-heads-to-string: head* -> heads-str
    with head-str* := <map(!$[`[<pp-partial-Statix-string>]' at [<origin-file;current-language-relative-source-or-include-path>]:[<origin-line;inc;int-to-string>]])> head*
       ; heads-str := <separate-by(|", ");concat-strings> head-str*


  get-rule-head(|a) = nabl2-get-property(|a,"head") ; where(nabl2-is-ground); topdown(try(?Ascribe(<id>, _)))

  get-rule-constraint(|a) = nabl2-get-property(|a,"decl") ; where(nabl2-is-ground)

rules

  rule-pattern-cmp(|a) =
    (get-rule-head(|a), get-rule-head(|a))
  ; rule-head-cmp(patterns-eq)

  rule-head-cmp(s): (C(x1, p1*), C(x2, p2*)) -> <id>
    where
      <raw-eq> (x1, x2)
    ; <s> (Tuple(p1*), Tuple(p2*))

  rule-head-cmp(s): (F(x1, p1*, _), F(x2, p2*, _)) -> <id>
    where
      <raw-eq> (x1, x2)
    ; <s> (Tuple(p1*), Tuple(p2*))

rules

  compare-patterns =
    prim("STX_compare_patterns")

  patterns-eq =
    try(pattern-lists-to-tuples);
    compare-patterns; <eq> (<id>, 0)

  patterns-lt =
    try(pattern-lists-to-tuples);
    compare-patterns; <lt> (<id>, 0)

  patterns-leq =
    try(pattern-lists-to-tuples);
    compare-patterns; <lt+eq> (<id>, 0)

  patterns-gt =
    try(pattern-lists-to-tuples);
    compare-patterns; <gt> (<id>, 0)

  patterns-geq =
    try(pattern-lists-to-tuples);
    compare-patterns; <gt+eq> (<id>, 0)

  pattern-lists-to-tuples =
    (!Tuple(<is-list>), !Tuple(<is-list>))
