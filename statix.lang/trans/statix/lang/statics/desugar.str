module statix/lang/statics/desugar

  /////////////////////////////////////////////////////////////////////
  // Desugaring: called before analysis
  /////////////////////////////////////////////////////////////////////

imports

  signatures/statix/lang/-

  statix/lang/util
  statix/lang/statics/-

  statix/runtime/constraints

signature
  sorts Marker constructors
    DesugaredAxiomRule : Marker

rules

  desugar-all =
    desugar-rules;
    desugar-decl-shorthands;
    desugar-ref-shorthands;
    desugar-regexes;
    desugar-queries;
    desugar-lambdas;
    desugar-tuples

rules

  desugar-rules = bottomup(try(desugar-rule))
  desugar-rule: AxiomRule(lbl, h) -> Rule(lbl, h, CTrue()){DesugaredAxiomRule()}

rules

  desugar-decl-shorthands = topdown(try(desugar-decl-shorthand))

  desugar-decl-shorthand: c@CTellDecl(st, dt) -> CTellRel(decl, [dt], st)
    with decl := <with-origin(|c)> Decl()

  desugar-decl-shorthand: c@CTellDeclWithRels(st, dt, rts) -> <stx--conj(|c1)> c2*
    with decl := <with-origin(|c)> Decl();
         c1   := <with-origin(|c)> CTellRel(decl, [dt], st);
         c2*  := <map(\ (rel, rt) -> <with-origin(|c)> CTellRel(rel, [dt, rt], st) \)> rts



rules

  desugar-ref-shorthands = topdown(try(desugar-ref-shorthand))

  desugar-ref-shorthand: c@CResolveRef(rt, st, pst, msg) -> c'
    with rel    := <with-origin(|c)> Decl();
         match  := <with-origin(|rt)> ResolveMatch(rt);
         lmatch := <with-origin(|rt)> OccurrenceMatch(rt);
         filter := <with-origin(|rt)> Filter(match, lmatch);
         ord    := <with-origin(|rt)> ResolveLt(rt);
         lord   := <with-origin(|rt)> LTrue();
         min    := <with-origin(|rt)> Min(ord, lord);
         prj    := <with-origin(|rt)> Project(PFull());
         c'     := CResolveQuery(rel, filter, min, prj, st, pst, msg)

  desugar-ref-shorthand: CResolveRefWithRel(rel, rt, st, pst, msg) -> c'
    with match  := <with-origin(|rt)> ResolveMatch(rt);
         lmatch := <with-origin(|rt)> OccurrenceMatch(rt);
         filter := <with-origin(|rt)> Filter(match, lmatch);
         ord    := <with-origin(|rt)> ResolveLt(rt);
         lord   := <with-origin(|rt)> LTrue();
         min    := <with-origin(|rt)> Min(ord, lord);
         prj    := <with-origin(|rt)> Project(PFull());
         c'     := CResolveQuery(rel, filter, min, prj, st, pst, msg)

rules

  desugar-regexes = bottomup(try(desugar-regex))

  desugar-regex: ZeroOrOne(re) -> Or(Epsilon(), re)
  desugar-regex: OneOrMore(re) -> Concat(re, Closure(re))

rules

  desugar-queries = bottomup(try(desugar-query))

  desugar-query: NoFilter() -> Filter(Neg(Empty()), LTrue())
  desugar-query: Filter(wf) -> Filter(wf, LTrue())
  desugar-query: Filter_dep(wf) -> Filter(wf, LTrue())
  desugar-query: Filter_dep(wf, l) -> Filter(wf, l)
  desugar-query: NamespaceFilter_dep(wf) -> NamespaceFilter(wf)
  desugar-query: NoNamespaceFilter() -> NamespaceFilter(Neg(Empty()))

  desugar-query: NoMin() -> Min([], LTrue())
  desugar-query: Min(ord) -> Min(ord, LTrue())
  desugar-query: Min_dep(ord) -> Min(ord, LTrue())
  desugar-query: Min_dep(ord, l) -> Min(ord, l)
  desugar-query: NamespaceMin_dep(ord) -> NamespaceMin(ord)
  desugar-query: NoNamespaceMin() -> NamespaceMin([])

  desugar-query: NoProject() -> Project(PFull())

rules

  desugar-lambdas = topdown(try(desugar-lambda))
  desugar-lambda: LLam(ts) -> LLam(ts, CTrue())

rules

  desugar-tuples = topdown(try(desugar-tuple))

  desugar-tuple: Tuple0Sort()      -> TupleSort([])
  desugar-tuple: TupleNSort(s, ss) -> TupleSort([s|ss])

  desugar-tuple: Tuple0()      -> Tuple([])
  desugar-tuple: TupleN(x, xs) -> Tuple([x|xs])

  desugar-tuple: Tuple0Lift()      -> TupleLift([])
  desugar-tuple: TupleNLift(x, xs) -> TupleLift([x|xs])
