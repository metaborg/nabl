module statix/lang/analysis

imports

  libspoofax/analysis/constraint

  nabl2shared
  nabl2/shared/ast // for index-ast
  nabl2runtime
  nabl2/api
  nabl2/runtime/analysis/main

  signatures/statix/lang/-

  statix/lang/-
  statix/lang/statics/-

  statix/runtime/pp
  pp/statix/lang/-
  pp

signature
  sorts CustomAnalysis constructors
    CustomUnitAnalysis : List(Error) * List(Warning) * Extensions -> CustomAnalysis
    CustomAnalysis : Extensions -> CustomAnalysis

rules // Analysis

  editor-analyze = nabl2-analyze(desugar-all)

  nabl2-custom-analysis-unit-hook:
      (resource, ast, _) -> CustomUnitAnalysis(e*, w*, ext-c*)
    with nabl2-custom-analysis-info-msg(|"Extra file analysis...")
       ; n-e* := <check-module-name(|resource)> ast
       ; nabl2-custom-analysis-info-msg(|"| collecting scope extensions...")
       ; ext-c* := <collect-ext-constraints> ast
       ; nabl2-custom-analysis-info-msg(|"| detecting accidental axioms...")
       ; ax-w* := <check-accidental-axioms> ast
     //; nabl2-custom-analysis-info-msg(|"| checking variable usage...")
       ; vu-w* := [] // <check-variable-usages(|a)> ast
       ; nabl2-custom-analysis-info-msg(|"| Done.")
       ; e* := n-e*
       ; w* := [ax-w*, vu-w*]

  nabl2-custom-analysis-final-hook(|a):
      (resource, _, units) -> result
    with nabl2-custom-analysis-info-msg(|"Finishing file analysis...")
       ; unit-e* := <map(?CustomUnitAnalysis(<id>, _, _));concat> units
       ; unit-w* := <map(?CustomUnitAnalysis(_, <id>, _));concat> units
       ; (e*, ca) := <nabl2-custom-analysis-final-hook'(|a)> units
       ; result := ([unit-e*, e*], [unit-w*], [], ca)
       ; nabl2-custom-analysis-info-msg(|"| Done.")

  nabl2-custom-analysis-final-hook'(|a):
      units -> (e*, ca)
    with nabl2-custom-analysis-info-msg(|"| detecting overlapping rules...")
       ; or-e* := <detect-overlapping-rules(|a)>
       ; ext-c* := <map(?CustomUnitAnalysis(_, _, <id>));concat> units
       ; nabl2-custom-analysis-info-msg(|"| explicate scope extensions...")
       ; ext-c'* := <explicate-ext-constraints(|a)> ext-c*
       ; <ext-log(prettyprint-Statix-ExtConstraints|"Extension constraints:")> ext-c'*
       ; nabl2-custom-analysis-info-msg(|"| solve scope extensions...")
       ; (ext, ext-e*) := <solve-ext-constraints> ext-c'*
       ; e* := [ext-e*, or-e*]
       ; ca := CustomAnalysis(ext)

  empty-custom-analysis = !([], CustomAnalysis([]))

  check-module-name(|path): ast -> e*
    with ext := <get-extension> path
       ; if <raw-eq> (ext, "spt") then
           e* := []
         else
           name-e* := <check-module-name'(|path) < ![<id>] + ![]> ast
         ; ext-e* := <check-module-ext'(|path) < ![<id>] + ![]> ast
         ; e* := [name-e*, ext-e*]
         end

  nabl2-prettyprint-hook   = prettyprint-Statix-IType
  prettyprint-Statix-IType = nabl2-prettyprint-term

  nabl2-prettyprint-hook   = prettyprint-Statix-TType
  prettyprint-Statix-TType = nabl2-prettyprint-term

