module nabl2/api

imports
  libstratego-lib

imports

  pp/nabl2/API-pp

  nabl2/shared
  nabl2/runtime

  // imports necessary to satisfy Stratego editor
  nabl2/shared/-
  nabl2/runtime/analysis/-
  nabl2/runtime/editor/-
  nabl2/runtime/transform/-

rules // ###### Analysis execution ######

  /**
   * Provide a general strategy for pretty-printing object language
   * terms in error messages. To make sure constraint variables in terms
   * are printed correctly, inject `nabl2-prettyprint-term` into your own
   * prettyprinting strategies.
   * 
   * Example:
   *   nabl2-prettyprint-hook    = prettyprint-YOURLANG-Type
   *   prettyprint-YOURLANG-Type = nabl2-prettyprint-term
   *
   * @type Term -> Box
   */
  nabl2-prettyprint-hook = fail

  /**
   * Strategy that prettyprints special NaBL2 constructors. Can be used to
   * inject into pretty-printing rules of the object language, to enable
   * pretty-printing of variables, scopes, and occurrences.
   * 
   * @type Term -> Box
   */
  nabl2-prettyprint-term = fail

  /**
   * Main editor analysis strategy for NaBL2, when using the `(constraint)`
   * analyzer. Supports single and multi file analysis.
   *
   * @param pre : Term -> Term Strategy to preprocess (e.g. desugar) AST
   */
  nabl2-analyze(pre) = nabl2--analyze(pre)

  /**
   * Analyze the given AST with NaBL2.
   *
   * @param resource:String
   * @type ast:Term -> (ast:Term, Analysis, errors:List(EditorMessage), warnings:List(EditorMessage), notes:List(EditorMessage))
   */
  nabl2-analyze-ast(|resource) = nabl2--analyze-ast(|resource)

  /**
   * Solve an NaBL2 constraint, with the given config.
   *
   * @param config:AnalysisConfig
   * @type Constraint -> (Analysis, errors:List(EditorMessage), warnings:List(EditorMessage), notes:List(EditorMessage))
   */
  nabl2-solve-constraint(|config) = nabl2--solve-constraint(|config, (), ())

  /**
   * Get the config of the NaBL2 spec.
   *
   * @type _ -> AnalysisConfig
   */
  nabl2-analysis-config = nabl2--analysis-config

rules // ###### Custom analysis hooks ######

  /**
   * @type (resource:String, ast:Term) -> CustomInitialResult
   */
  nabl2-custom-analysis-init-hook = fail

  /**
   * @type (resource:String, ast:Term, CustomInitialResult) -> CustomUnitResult
   */
  nabl2-custom-analysis-unit-hook = fail

  /**
   * @param a : Analysis
   * @type (resource:String, ast:Term, CustomInitialResult) -> CustomUnitResult
   */
  nabl2-custom-analysis-unit-hook2(|a) = fail

  /**
   * @param a : Analysis
   * @type (resource:String, CustomInitialResult, List(CustomUnitResult))
   *         -> (errors:List(EditorMessage), warnings:List(EditorMessage), notes:List(EditorMessage), CustomFinalResult)
   */
  nabl2-custom-analysis-final-hook(|a) = fail

  /**
   * @type Analysis -> CustomFinalResult
   */
  nabl2-get-custom-analysis =
    nabl2--get-custom-analysis

  /**
   * Use for logging a message during custom analysis. The message
   * printing is subject to the NaBL2 debug settings for resolution.
   *
   * @param msg : String
   * @type _ -> _
   */
  nabl2-custom-analysis-info-msg(|msg) =
    nabl2--custom-info-msg(|msg)

  /**
   * Use for logging a message and a term during custom analysis. The
   * message printing is subject to the NaBL2 debug settings for resolution.
   *
   * @param msg : String
   * @type Term -> _
   */
  nabl2-custom-analysis-info(|msg) =
    nabl2--custom-info(|msg)

  /**
   * Test if logging for custom analysis is enabled. Can be used to prevent
   * computation of messages that are not going to be displayed.
   */
  nabl2-is-custom-analysis-info-enabled =
    nabl2--is-debug-custom-enabled

  nabl2--transform-all-occurrences = bottomup(try(nabl2--transform-occurrences))

rules // ###### Analysis results ######

  /**
   * Get analysis for the given AST node
   *
   * @type node:Term -> Analysis
   */
  nabl2-get-ast-analysis = nabl2--get-ast-analysis

  /**
   * Get analysis for the given resource
   *
   * @type filename:String -> Analysis
   */
  nabl2-get-resource-analysis = nabl2--get-resource-analysis

  /**
   * Test if analysis has errors
   *
   * Fails if there are no errors, succeeds otherwise.
   *
   * @type Analysis -> _
   */
  nabl2-analysis-has-errors = nabl2--analysis-has-errors

  /**
   * @param a : Analysis
   * @type node:Term -> Term
   */
  nabl2-get-ast-params(|a) = nabl2--get-ast-params(|a)
  nabl2-get-ast-params =
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-params(|a)

  /**
   * @param a : Analysis
   * @type node:Term -> Type
   */
  nabl2-get-ast-type(|a) = nabl2--get-ast-type(|a)
  nabl2-get-ast-type =
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-type(|a)

  /**
   * @param a : Analysis
   * @param prop : String
   * @type node:Term -> Term
   */
  nabl2-get-ast-property(|a,prop) =
    nabl2--get-ast-property-by-name(|a,prop)

  /**
   * @type node:Term -> List(Occurrence)
   */
  nabl2-get-ast-decls =
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-decls(|a)
  nabl2-get-ast-decls(|a) = nabl2--get-ast-decls(|a)

  /**
   * @param a : Analysis
   * @type node:Term -> List(Occurrence)
   */
  nabl2-get-ast-refs =
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-refs(|a)
  nabl2-get-ast-refs(|a) = nabl2--get-ast-refs(|a)

  /**
   * @param a : Analysis
   * @type decl:Occurrence -> Type
   */
  nabl2-get-type(|a) = nabl2--get-decl-type(|a)

  /**
   * @param a : Analysis
   * @param prop : String
   * @type decl:Occurrence -> Term
   */
  nabl2-get-property(|a,prop) = nabl2--get-decl-property-by-name(|a,prop)

  /**
   * @param a : Analysis
   * @type ref:Occurrence -> (decl:Occurrence, Path)
   */
  nabl2-get-resolved-name(|a) = nabl2-get-resolved-names(|a); ?[<id>]

  /**
   * @param a : Analysis
   * @type ref:Occurrence -> List((decl:Occurrence, Path))
   */
  nabl2-get-resolved-names(|a) = nabl2--get-ref-resolution(|a)

  /**
   * @param a : Analysis
   * @type decl:Occurrence -> List((ref:Occurrence, Path))
   */
  nabl2-get-refs-to-decl(|a) = nabl2--get-decl-resolution(|a)


rules // ###### Scope graphs ######

  /**
   * Get all declarations in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Occurrences)
   */
  nabl2-get-all-decls(|a) = nabl2--get-all-decls(|a)

  /**
   * Get all references in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Occurrences)
   */
  nabl2-get-all-refs(|a) = nabl2--get-all-refs(|a)

  /**
   * Get all scopes in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Scope)
   */
  nabl2-get-all-scopes(|a) = nabl2--get-all-scopes(|a)

  /**
   * Get the scope of a reference
   *
   * @param a : Analysis
   * @type ref:Occurrence -> Scope
   */
  nabl2-get-ref-scope(|a) = nabl2--get-ref-scope(|a)

  /**
   * Get the scope of a declaration
   *
   * @param a : Analysis
   * @type decl:Occurrence -> Scope
   */
  nabl2-get-decl-scope(|a) = nabl2--get-decl-scope(|a)

  /**
   * Get declarations in a scope
   *
   * @param a : Analysis
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-scope-decls(|a) = nabl2--get-scope-decls(|a)

  /**
   * Get references in a scope
   *
   * @param a : Analysis
   * @type Scope -> List(ref:Occurrence)
   */
  nabl2-get-scope-refs(|a) = nabl2--get-scope-refs(|a)

  /**
   * Get direct edges from a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,Scope))
   * @type (Scope,Label) -> List(Scope)
   */
  nabl2-get-direct-edges(|a) = nabl2--get-direct-edges(|a)

  /**
   * Get inverse direct edges from a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,Scope))
   * @type (Scope,Label) -> List(Scope)
   */
  nabl2-get-direct-edges-inv(|a) = nabl2--get-direct-edges-inv(|a)

  /**
   * Get import edges from a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,ref:Occurrence))
   * @type (Scope,Label) -> List(ref:Occurrence)
   */
  nabl2-get-import-edges(|a) = nabl2--get-import-edges(|a)

  /**
   * Get inverse import edges from a reference
   *
   * @param a : Analysis
   * @type ref:Occurrence -> List((Label,Scope))
   * @type (ref:Occurrence,Label) -> List(Scope)
   */
  nabl2-get-import-edges-inv(|a) = nabl2--get-import-edges-inv(|a)

  /**
   * Get associated scopes of a declaration
   *
   * @param a : Analysis
   * @type decl:Occurrence -> List((Label,Scope))
   * @type (decl:Occurrence,Label) -> List(Scope)
   */
  nabl2-get-assoc-edges(|a) = nabl2--get-export-edges(|a)
 
  /**
   * Get associated declarations of a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,decl:Occurrence))
   * @type (Scope,Label) -> List(decl:Occurrence)
   */
  nabl2-get-assoc-edges-inv(|a) = nabl2--get-export-edges-inv(|a)

  /**
   * Get visible declarations in scope
   *
   * @param a : Analysis
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-visible-decls(|a) = nabl2--get-visible-decls(|a)

  /**
   * Get reachable declarations in scope
   *
   * @param a : Analysis
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-reachable-decls(|a) = nabl2--get-reachable-decls(|a)

  /**
   * Make an occurrence in the default namespace
   *
   * NaBL2 equivalent: {node}
   *
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence = nabl2--mk-occurrence

  /**
   * Make an occurrence in the specified namespace
   *
   * NaBL2 equivalent: namespace{node}
   *
   * @param ns : String
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence(|ns) = nabl2--mk-occurrence(|ns)

  /**
   * Make an occurrence in the specified namespace, using an origin term
   *
   * NaBL2 equivalent: namespace{node @t}
   *
   * @param ns : String
   * @param t : Term
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence(|ns,t) = nabl2--mk-occurrence(|ns,t)

  /**
   * Get namespace of an occurrence
   *
   * @type Occurrence -> String
   */
  nabl2-get-occurrence-ns = nabl2--occurrence-ns

  /**
   * Get name of an occurrence
   *
   * @type Occurrence -> Term
   */
  nabl2-get-occurrence-name = nabl2--occurrence-name

  /**
   * Get index of an occurrence
   *
   * @type Occurrence -> TermIndex
   */
  nabl2-get-occurrence-index = nabl2--occurrence-index

  /**
   * Get scopes of path
   *
   * @type Path -> [Scope]
   */
  nabl2-get-path-scopes = nabl2--get-path-scopes

rules // ###### Symbolic Constraints ######
  
  /**
   * Get symbolic facts
   *
   * @param a : Analysis
   * @type _ -> List(Term)
   */
  nabl2-get-symbolic-facts(|a) = nabl2--get-symbolic-facts(|a)

  /**
   * Get symbolic goals
   *
   * @param a : Analysis
   * @type _ -> List(Term)
   */
  nabl2-get-symbolic-goals(|a) = nabl2--get-symbolic-goals(|a)



rules // ###### AST Indices ######

  /**
   * Get AST index. Fails if term has no index.
   *
   * @type Term -> TermIndex
   */
  nabl2-get-ast-index = nabl2--get-ast-index

  /**
   * Set AST index on a term. Throws an exception of the index argument
   * is not a valid index.
   *
   * @param index : Termindex
   * @type Term -> Term
   */
  nabl2-set-ast-index(|index) = nabl2--set-ast-index(|index)

  /**
   * Copy AST index from one term to another. Fails if the source has no
   * index.
   *
   * @param from : Termindex
   * @type Term -> Term
   */
  nabl2-copy-ast-index(|from) = nabl2--copy-ast-index(|from)

  /**
   * Execute a strategy and copy the index of the input term to the output
   * term. If the original term has no index, the result of applying s is
   * returned unchanged. Thus, failure behaviour of s is preserved.
   *
   * @type Term -> Term
   */
  nabl2-preserve-ast-index(s) = nabl2--preserve-ast-index(s)

  /**
   * Erase AST indices from a term, preserving other annotations and
   * attachments.
   *
   * @type Term -> Term
   */
  nabl2-erase-ast-indices = nabl2--erase-ast-indices

  /**
   * Simplify AST indices from a term, preserving other annotations and
   * attachments.
   *
   * @type Term -> Term
   */
  nabl2-simplify-ast-indices = nabl2--simplify-ast-indices

rules // ##### Transformation Utils #####

  /**
   * Add explicit type annotations on the AST nodes
   *
   * @param a : Analysis
   * @type Term -> Term
   */
  nabl2-add-anno-types(|a) = fail

  /**
   * Remove explicit type annotation
   *
   * @type Term -> Term
   */
  nabl2-remove-anno-type = fail

  /**
   * Set explicit type annotation
   *
   * @type Term -> Term
   */
  nabl2-set-anno-type(|ty) = fail
  
  /**
   * Get type from explicit annotation
   *
   * @type Term -> Term
   */
  nabl2-get-anno-type = fail

  /**
   * Copy type from t to current term
   *
   * @param t : Term
   * @type Term -> Term
   */
  nabl2-copy-anno-type(|t) = fail

  /**
   * Preserve type annotation on the transformed term
   *
   * @param s : Term -> Term
   * @type Term -> Term
   */
  nabl2-preserve-anno-type(s) = fail
  
rules // ###### Editor Integration ######

  /**
   * Editor resolve references integration
   *
   * @type (node, position, ast, path, project-path) -> decl
   */
  nabl2-editor-resolve = nabl2--editor-resolve

  /**
   * Editor hover integration
   *
   * @type (node, position, ast, path, project-path) -> label
   */
  nabl2-editor-hover = nabl2--editor-hover

rules
  
  nabl2-is-ground = nabl2--is-ground
