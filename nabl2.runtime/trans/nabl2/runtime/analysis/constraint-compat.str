module nabl2/runtime/analysis/constraint-compat

imports
  libstratego-lib

imports

  libspoofax/analysis/constraint

// This module defines the interface for a stateful analysis cycle. It supports
// single and multi file analysis.
//
// Single file mode
// ~~~~~~~~~~~~~~~~
//
// Single file analysis treats all files in isolation. To use it, set the following
// in your ESV file:
//
//     observer : ANALYSIS-STRATEGY (constraint)
//
// The strategy ANALYSIS-STRATEGY should accept an AnalyzeUnit/2 term as input,
// and return a UnitResult/5 term as output. The input arguments are a string
// indicating the resource being analyzed, and the AST. The output arguments are
// the analyzed AST, a term representing the result of analysis , and three lists
// of errors, warnings, and notes.
//
// The result of analysis is stored, and can be used in transformations. It can
// be retreived by calling the `get-resource-analysis` strategy. The format of
// this term is completely free.
//
// Multi file mode
// ~~~~~~~~~~~~~~~
//
// Multi file analysis analyses the files in a project together. It proceeds in
// three phaes. An initial phase for project-wide setup, a phase where files are
// analyzed individually, and a final phase where all file results are combined
// into a project-wide result. To use multi file mode, set the following in your
// ESV file:
//
//     observer : ANALYSIS-STRATEGY (constraint) (multifile)
//
// The strategy ANALYSIS-STRATEGY should implement three cases for the three
// phases of analysis:
// 1. The project-wide setup should accept an AnalyzeInitial/1 term as input and
//    return a InitialResult/1 term as output. The input argument is a string
//    representing the project resource, and the output argument a term repre-
//    senting the initial project analysis.
// 2. The per-file analysis should accept an AnalyzeUnit/3 term is input, and
//    return a UnitResult/2 term as output. The input arguments are a string
//    indicating the file being analyzed, the AST of the file, and the initial
//    analysis from phase (1). The output arguments are the analyzed AST, and the
//    (partial) result for this file.
// 3. The project-wide final analysis should accept an AnalyzeFinal/3 term is
//    input, and return a FinalResult/4 term as output. The input arguments are
//    a string representing the project resource, the initial analysis result from
//    phase (1), and a list of the file results from phase (2). The output arguments
//    are a term representing the final project-wide analysis result, and three
//    lists of errors, warnings, and notes.
//
// The result of analysis is stored, and can be used in transformations. It can
// be retreived by calling the `get-resource-analysis` strategy. The format of
// this term is completely free. It is also possible to retreive the results of
// the initial and unit phases, which can be useful for debugging, by using the
// strategy `get-partial-resource-analysis`.

signature

  constructors // single file analysis

    AnalyzeUnit : String    // resource
                * Term      // ast
                * Cancel
                * Progress
               -> AnalysisAction
    UnitResult  : Term                   // analyzed ast
                * Term                   // analysis
                * List(EditorMessage)    // errors
                * List(EditorMessage)    // warnings
                * List(EditorMessage)    // notes
               -> AnalysisResult


  constructors // multi file analysis

    AnalyzeInitial : String    // project resource
                   * Cancel
                   * Progress
                  -> AnalysisAction
    InitialResult  : Term    // initial analysis
                  -> AnalysisResult

    AnalyzeUnit : String    // file resource
                * Term      // ast
                * Term      // initial analysis
                * Cancel
                * Progress
               -> AnalysisAction
    UnitResult  : Term    // analyzed ast
                * Term    // file analysis
               -> AnalysisResult

    AnalyzeFinal : String        // project resource
                 * Term          // initial analysis
                 * List(Term)    // file analyses
                 * Cancel
                 * Progress
                -> AnalysisAction
    FinalResult  : Term                   // final analysis
                 * List(EditorMessage)    // errors
                 * List(EditorMessage)    // warnings
                 * List(EditorMessage)    // notes
                -> AnalysisResult

    CompatUnitAnalysis : Term // initial analysis
                       * Term // final analysis
                      -> CompatAnalysis

    CompatProjectAnalysis : Term // initial analysis
                          * Term // final analysis
                         -> CompatAnalysis

rules

  constraint-analysis-compat(analyze):
      AnalyzeSingle(change*, progress, cancel) -> AnalysisResult(result*)
    with
      ast* := <filter((id, ?Added(<id>) + ?Changed(<id>, _)))> change*
    ; unit-result* := <map({ resource, ast, ast', a', error*, warning*, note*:
                             ?(resource, ast)
                           ; ( UnitResult(ast', a', error*, warning*, note*) :=
                                   <analyze> AnalyzeUnit(resource, ast, cancel, progress)
                             < !(resource, Full(ast', CompatUnitAnalysis(a', a'), error*, warning*, note*))
                             + !(resource, Failed())
                             )
                           })> ast*
    ; result* := unit-result*

  constraint-analysis-compat(analyze):
      AnalyzeMulti((project-resource, project-change), change*, progress, cancel) -> AnalysisResult(result*)
    with
      switch !project-change
        case ?Added(_) + ?Changed(_, _):
          InitialResult(project-initial-analysis) := <analyze> AnalyzeInitial(project-resource, cancel, progress)
        case ?Cached(CompatProjectAnalysis(project-initial-analysis, _)):
          id
        otherwise:
          fatal-err(|"Unexpected change on project")
      end
    ; changed-ast*   := <filter((id, ?Added(<id>) + ?Changed(<id>, _)))> change*

    ; unit-initial-result-changed* := <map({ unit-resource, unit-ast, unit-ast', unit-analysis:
                                             ?(unit-resource, unit-ast)
                                           ; ( UnitResult(unit-ast', unit-analysis) :=
                                                   <analyze> AnalyzeUnit(unit-resource, unit-ast, project-initial-analysis, cancel, progress)
                                             < !(unit-resource, Full(unit-ast', CompatUnitAnalysis(unit-analysis, None()), [], [], []))
                                             + !(unit-resource, Failed())
                                             )
                                           })> changed-ast*
    ; unit-initial-analysis-changed* := <filter(?(_, Full(_, CompatUnitAnalysis(<id>, _), _, _, _)))> unit-initial-result-changed*

    ; unit-initial-result-cached* := <filter(\ (unit-resource, Cached(CompatUnitAnalysis(unit-analysis, _)))
                                                -> (unit-resource, Update(CompatUnitAnalysis(unit-analysis, None()), [], [], []))
                                         \)> change*
    ; unit-initial-analysis-cached* := <filter(?(_, Update(CompatUnitAnalysis(<id>, _), _, _, _)))> unit-initial-result-cached*

    ; unit-initial-analysis* := [unit-initial-analysis-changed*, unit-initial-analysis-cached*]
    ; if project-analysis-cached*@[_|_] := <filter(?(<id>, Cached(CompatProjectAnalysis(_, _))))> change* then
        <fatal-err(|"Context is in inconsistent state. Clean the project to reset the context. This can happen when a context is written in one environment (e.g., Eclipse) and later read in another (e.g., Maven).")> project-analysis-cached*
      end
    ; FinalResult(final-analysis, error*, warning*, note*) :=
          <analyze> AnalyzeFinal(project-resource, project-initial-analysis, unit-initial-analysis*, cancel, progress)
    ; project-analysis := CompatProjectAnalysis(project-initial-analysis, final-analysis)
    ; unit-result-changed* := <map((id, Full(id, CompatUnitAnalysis(id, !final-analysis), id, id, id) + ?Failed()))> unit-initial-result-changed*
    ; unit-result-cached* := <map((id, Update(CompatUnitAnalysis(id, !final-analysis), id, id, id)))> unit-initial-result-cached*
    ; unit-result* := [unit-result-changed*, unit-result-cached*]
    ; switch !project-change
        case ?Added(project-ast) + ?Changed(project-ast, _):
          project-result := Full(project-ast, project-analysis, error*, warning*, note*)
        case ?Cached(_):
          project-result := Update(project-analysis, error*, warning*, note*)
      end
    ; result* := [(project-resource, project-result)|unit-result*]

rules

  /**
   * @type resource:String -> analysis:Term
   */
  nabl2--get-resource-analysis =
    get-resource-constraint-analysis
  ; ( ?CompatUnitAnalysis(_, <id>) + ?CompatProjectAnalysis(_, <id>) )

  /**
   * @type resource:String -> analysis:Term
   */
  nabl2--get-resource-partial-analysis =
    get-resource-constraint-analysis
  ; ( ?CompatUnitAnalysis(<id>, _) + ?CompatProjectAnalysis(<id>, _) )
