module nabl2/runtime/transform/renaming

imports
  libstratego-lib

imports
  signatures/-
  signatures/nabl2/shared/common/-
  signatures/nabl2/runtime/common/-
  nabl2/api
  nabl2/runtime/analysis/constraint-compat
  libspoofax/analysis/constraint
  libspoofax/ui/dialogs

rules
  nabl2-rename-action(construct-textual-change, analyze, multi|) :
    (selected-term, _, selected-ast, path, _) -> renamed-program
    with
      {| ErrorMessage:
        new-name := <read-new-name> path
        ; renamed-asts := <nabl2-rename(analyze, multi|selected-term, new-name)> selected-ast
        ; renamed-program := <nabl2-construct-renamed-program(construct-textual-change)> renamed-asts
      <+ show-errors |}

  nabl2-rename(analyze, multi|selected-term, new-name): selected-ast -> renamed-asts
    where
      asts := <nabl2-get-analysed-asts(multi)> selected-ast
      ; analysis := <nabl2-get-project-analysis(multi)> selected-ast
      ; res-rel := <nabl2-calc-resolution-relation> analysis
      ; selected-index := <nabl2-find-name-index(|selected-ast, res-rel)> selected-term
      ; (target-paths, target-indices) := <nabl2-find-rename-target> (selected-index, res-rel)
      ; renamed-asts := <nabl2-rename-asts(|target-indices, target-paths, new-name)> asts
      ; nabl2-check-capture(analyze, multi|renamed-asts, res-rel)

rules // Step 1: Calculate resolution relation
  nabl2-calc-resolution-relation: analysis -> user-defined-relation
    where
      refs  := <nabl2-get-all-refs(|analysis);filter(is-string-occ)> analysis
      ; decs := <nabl2-get-all-decls(|analysis);filter(is-string-occ)> analysis
      ; ref-dec-pairs := <map(nabl2-make-resolution-pair(|analysis))> refs
      ; decs-reflexive-pairs := <filter(resolves-to-term-index);map(nabl2-make-reflexive-pair)> decs
      ; relation := <conc;make-set> (decs-reflexive-pairs, ref-dec-pairs)
      ; user-defined-relation := <filter(is-user-defined)> relation

  nabl2-make-resolution-pair(|analysis) : ref -> (ref-index, dec-index)
    where
      (dec, _) := <nabl2-get-resolved-name(|analysis)> ref
      ; ref-index := <get-term-index-from-occ> ref
      ; dec-index := <get-term-index-from-occ> dec

  nabl2-make-reflexive-pair: dec -> (term-index, term-index)
    where
      term-index := <get-term-index-from-occ> dec

  is-user-defined: (ref, dec@TermIndex(path, num-index)) -> <id>
    where
      <not(eq)> (num-index, 0)

  is-string-occ: Occurrence(_, term, _) -> <id>
    where
      <is-string> term

  resolves-to-term-index: Occurrence(_, term, TermIndex(_,_)) -> <id>

  get-term-index-from-occ: Occurrence(_, _, term-index) -> term-index

rules // Step 2: Find name index in selection
  nabl2-find-name-index(|ast, res-rel): term -> occ-index
    where
      <check-selection(|term, ast)> ast
      ; occ-index := <collect-one(nabl2-get-name-index(|res-rel))> term
        <+  term-string := <write-to-string> term
        ; error-msg := <conc-strings> ("The selected name cannot be renamed:\n", term-string)
        ; add-error(|"Renaming impossible", error-msg)

  nabl2-get-name-index(|res-rel): term -> occurrence
    where
      if (<is-list> term) then
        <map(nabl2-get-name-index(|res-rel))> term
      else
        <is-string> term
        ; term-index := <nabl2-get-ast-index> term
        ; occurrence := <fetch-elem(res-pair-contains(|term-index))> res-rel
      end

  res-pair-contains(|term-index): (ref-index, dec-index) -> term-index
    where
      <eq> (term-index, ref-index) <+ <eq> (term-index, dec-index)

  check-selection(|selected-term, ast) =
    <not(eq)> (selected-term, ast)
    <+ add-error(|"Invalid selection", "Please select a name")

rules //Step 3: Find occurrences to rename
  nabl2-find-rename-target: (selected-occ, resolution-relation) -> (target-paths, target-indices)
    where
      target-indices := <find-all-related-occs> (selected-occ, resolution-relation)
      ; target-paths := <get-paths-to-rename> target-indices

  get-paths-to-rename: target-indices -> paths
    where
      paths := <map(get-paths);nub> target-indices

  get-paths: TermIndex(path, _) -> path

rules //Step 4: Rename terms
  nabl2-rename-asts(|target-indices, target-paths, new-name): asts -> renamed-asts
    where
      renamed-asts := <map(nabl2-rename-ast(|target-indices, target-paths, new-name))> asts

  nabl2-rename-ast(|target-indices, target-paths, new-name): (path, ast) -> (path, ast, renamed-ast)
    where
      if (<path-in(|target-paths)> path) then
        renamed-ast := <bottomup(try(nabl2-rename-term(|target-indices, new-name)))> ast
      else
        renamed-ast := ()
      end

  path-in(|paths): path -> <id>
    where
      <elem> (path, paths)

  nabl2-rename-term(|target-indices, new-name): term -> new-name
    where
      <is-string> term
      ; term-index := <nabl2-get-ast-index> term
      ; <elem> (term-index, target-indices)

rules //Step 5: Checking for capture
  nabl2-check-capture(analyze, multi|renamed-asts, resolution-relation) =
    new-analysis := <nabl2-rerun-analysis(analyze, multi)> renamed-asts
    ; new-resolution-relation := <nabl2-calc-resolution-relation; qsort(res-pair-gt)> new-analysis
    ; old-resolution-relation := <qsort(res-pair-gt)> resolution-relation
    ; <eq>(old-resolution-relation, new-resolution-relation)
      <+ add-error(|"Capture detected", "This renaming leads to name capture")

  nabl2-rerun-analysis(analyze, multi): renamed-asts -> new-analysis
    where
      if multi then
        new-analysis := <nabl2-rerun-analysis-multi(analyze)> renamed-asts
      else
        new-analysis := <nabl2-rerun-analysis-single(analyze)> renamed-asts
      end

  nabl2-rerun-analysis-single(analyze): [(path, _,  renamed-ast)] -> new-analysis
    where
      input := <nabl2-make-analysis-input-single> (path, renamed-ast)
      ; AnalysisResult(analyses) := <analyze> input
      ; (_, Full(_, CompatUnitAnalysis(_, new-analysis), _, _,_)) := <fetch-elem(?(path, _))> analyses

  nabl2-make-analysis-input-single: (path, renamed-ast) -> AnalyzeSingle([(path, change)], (), ())
    where
      old-analysis := <nabl2-get-ast-analysis> renamed-ast
      ; change := Changed(renamed-ast,old-analysis)

  nabl2-rerun-analysis-multi(analyze): renamed-asts -> new-analysis
    where
      input := <nabl2-make-analysis-input-multi> renamed-asts
      ; analysis-result := <analyze> input
      ; new-analysis := <get-new-analysis> analysis-result

  nabl2-make-analysis-input-multi: renamed-asts ->  AnalyzeMulti(project-changes, file-changes, (), ())
    where
      project-analyses := <get-project-constraint-analyses>
      ; analysis := <get-project-entry> project-analyses
      ; project-changes := (".", Cached(analysis))
      ; file-changes := <map(nabl2-make-file-change(|project-analyses))> renamed-asts

  nabl2-make-file-change(|project-analyses): (path, ast, renamed-ast) -> (path, file-change)
    where
      (_, analysis) := <fetch-elem(get-entry(|path))> project-analyses;
      if (<eq> (renamed-ast, ())) then
        file-change := Cached(analysis)
      else
        file-change := Changed(renamed-ast, analysis)
      end

  get-new-analysis:  AnalysisResult(analysis-list) -> analysis-object
    where
      (Update(project-analysis, _, _, _)) := <get-project-entry> analysis-list
      ; analysis-object := <get-analysis-object> project-analysis

  res-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
    where
      <term-index-gt> (ref-1, ref-2)

  term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
    where
      if <eq> (path-1, path-2) then
         <gt> (num-index-1, num-index-2)
      else
         <string-gt> (path-1, path-2)
      end

rules // Step 6: Reconstruct Program
  nabl2-construct-renamed-program(construct-textual-change): asts -> renamed-program
    where
      changed-asts := <filter(has-changed)> asts
      ; renamed-program := <map(construct-renamed-file(construct-textual-change));unzip> changed-asts

  construct-renamed-file(construct-textual-change): (path, ast, renamed-ast) -> (path, text)
    where
      (_, _, text) := <construct-textual-change> (ast, renamed-ast)

  has-changed: (_, _, renamed-ast) -> <id>
    where
      <not(eq)> (renamed-ast, ())

rules // Utility strategies
  read-new-name: _ -> new-name
    where
      new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"

  nabl2-get-project-analysis(multi): ast -> analysis
    where
      if multi then
          project-analyses := <get-project-constraint-analyses>
        ; analysis := <get-project-entry;get-analysis-object> project-analyses
      else
        analysis := <nabl2-get-ast-analysis> ast
      end

  get-project-entry: entries -> project-analysis
    where
      (_, project-analysis) := <fetch-elem(is-project-entry)> entries

  is-project-entry = get-entry(|".")

  get-entry(|search-path): (path, _) -> <id>
    where
      <eq> (path, search-path)

  get-analysis-object: CompatProjectAnalysis(_, analysis-object) -> analysis-object

  get-analysis-object: CompatUnitAnalysis(_, analysis-object) -> analysis-object

  nabl2-get-analysed-asts(multi): selected-ast -> asts
    where
      if multi then
        asts := <nabl2-get-analysed-asts-multi>
      else
        asts := <nabl2-get-analysed-asts-single> selected-ast
      end

  nabl2-get-analysed-asts-multi: _ -> asts
    where
      project-asts := <get-project-analyzed-asts>
      ; asts := <filter(not(is-project-entry))> project-asts

  nabl2-get-analysed-asts-single: selected-ast -> [(path, selected-ast)]
    where
      TermIndex(path,_) := <nabl2-get-ast-index> selected-ast

rules // error handling
  add-error(|title, message) =
    rules(
      ErrorMessage :+ () -> (title, message)
    ); fail

  show-errors =
    [(title, message) | _] := <bagof-ErrorMessage> ()
    ; <show-dialog(|title, "ERROR")> message

rules // primitives
  find-all-related-occs =  prim("FindAllRelatedOccurrences")
