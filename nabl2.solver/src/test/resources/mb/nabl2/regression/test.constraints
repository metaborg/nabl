constraints {
  @:21.params := ?.-s-1,
  new ?-s_test-1  @:21,
  ?-s_test-1 -P-> ?.-s-1  @:21,
  @:21.scope := ?-s_test-1,
  Barrier{  @:21} <- ?-s_test-1  @:21,
  Barrier{  @:21} =B=> ?-s_test-1  @:21,
  new ?-s_syn-1  @:21,
  ?-s_test-1 -LS-> ?-s_syn-1  @:21,
  @:20.params := (?-s_test-1,?-s_syn-1,?.-s-1),
  @:20.params := (?-s_test-1,?-s_syn-1,?.-s-1),
  true  @:20,
  distinct/name D(?-s_test-1)/C | error Duplicate constraint NAME @ NAMES,
  distinct/name D(?-s_test-1)/Ns | error Duplicate namespace NAME @ NAMES,
  distinct/name D(?-s_test-1)/NsQ | error Duplicate resolution policy for namespace NAME @ NAMES,
  distinct/name ( D(?-s_test-1)/Rel union D(?-s_test-1)/Edge ) | error Duplicate label/relation NAME @ NAMES,
  ( D(?-s_test-1)/C lsect/name ( W(?-s_test-1)/C minus D(?-s_test-1)/C ) ) subseteq 0 | warning Shadows imported constraint NAME @ NAMES,
  ( D(?-s_test-1)/Ns lsect/name ( W(?-s_test-1)/Ns minus D(?-s_test-1)/Ns ) ) subseteq 0 | warning Shadows imported namespace NAME @ NAMES,
  ( D(?-s_test-1)/NsQ lsect/name ( W(?-s_test-1)/NsQ minus D(?-s_test-1)/NsQ ) ) subseteq 0 | warning Shadows imported resolution policy for namespace NAME @ NAMES,
  ( ( D(?-s_test-1)/Rel union D(?-s_test-1)/Edge ) lsect/name ( ( W(?-s_test-1)/Rel union W(?-s_test-1)/Edge ) minus ( D(?-s_test-1)/Rel union D(?-s_test-1)/Edge ) ) ) subseteq 0 | warning Shadows imported edge label / relation NAME @ NAMES,
  distinct/name D(?-s_syn-1)/Op | error Duplicate constructor NAME @ NAMES,
  distinct/name D(?-s_syn-1)/Sort | error Duplicate sort NAME @ NAMES,
  ?- DistinctPatterns(?-localRules-1)  @:20,
  ?-localRules-1 is set D(?-s_syn-1)/Rule | error (default) @:20,
  ( D(?-s_syn-1)/Sort lsect/name ( W(?-s_test-1)/Sort minus D(?-s_syn-1)/Sort ) ) subseteq 0 | error Duplicate of imported sort NAME @ NAMES,
  ( D(?-s_syn-1)/Op lsect/name ( W(?-s_test-1)/Op minus D(?-s_syn-1)/Op ) ) subseteq 0 | error Duplicate of imported constructor NAME @ NAMES,
  ?- NoDuplicatePatterns(?-localRules-1,?-importedRules-1,())  @:20,
  ?-importedRules-1 is set ( W(?-s_test-1)/Rule minus D(?-s_syn-1)/Rule ) | error (default) @:20,
  @:18.params := ?-s_test-1,
  ?-ty-1 == ?-ty-2 | error (default) @:9,
  @:9.type := ?-ty-1,
  @:9.params := ?-s_test-1,
  ?-ty-2 == TUPLE(?-tys-1) | error (default) @:9,
  @:9.type := ?-ty-2,
  @:9.params := ?-s_test-1,
  ?-tys-1 == [?-ty-3|?-tys-2] | error (default) @:8,
  @:8.type := ?-tys-1,
  @:8.params := ?-s_test-1,
  ?-ty-3 == ?-ty-4 | error (default) @:1,
  @:1.type := ?-ty-3,
  @:1.params := ?-wld2-1,
  true  @:1,
  ?-tys-2 == [?-ty-5|?-tys-3] | error (default) @:6,
  @:6.type := ?-tys-2,
  @:6.params := ?-s_test-1,
  ?-ty-5 == ?-ty-6 | error (default) @:2,
  @:2.type := ?-ty-5,
  @:2.params := ?-wld2-2,
  true  @:2,
  ?-tys-3 == [?-ty-7|?-tys-4] | error (default) @:5,
  @:5.type := ?-tys-3,
  @:5.params := ?-s_test-1,
  ?-ty-7 == ?-ty-8 | error (default) @:3,
  @:3.type := ?-ty-7,
  @:3.params := ?-wld2-3,
  true  @:3,
  ?-tys-4 == | error (default) @:4,
  @:4.type := ?-tys-4,
  @:4.params := ?-s_test-1,
  true  @:4,
  ?-ty-1 == ?-ty-9 | error (default) @:16,
  @:16.type := ?-ty-1,
  @:16.params := ?-s_test-1,
  ?-ty-9 == TUPLE(?-tys-5) | error (default) @:16,
  @:16.type := ?-ty-9,
  @:16.params := ?-s_test-1,
  ?-tys-5 == [?-ty-10|?-tys-6] | error (default) @:15,
  @:15.type := ?-tys-5,
  @:15.params := ?-s_test-1,
  ?-ty-10 == ?-ty-11 | error (default) @:10,
  @:10.type := ?-ty-10,
  @:10.params := ?-wld2-4,
  true  @:10,
  ?-tys-6 == [?-ty-12|?-tys-7] | error (default) @:13,
  @:13.type := ?-tys-6,
  @:13.params := ?-s_test-1,
  ?-ty-12 == ?-ty-13 | error (default) @:11,
  @:11.type := ?-ty-12,
  @:11.params := ?-wld2-5,
  true  @:11,
  ?-tys-7 == | error (default) @:12,
  @:12.type := ?-tys-7,
  @:12.params := ?-s_test-1,
  true  @:12,
  @:17.params := ?-s_test-1,
  true  @:17,
  This{  @:21} <- ?-s_test-1  @:21,
  This{  @:21}.qname := "" !! | error (default) @:21,
  true  @:21
}