resolve {}

  programOk([
    PartialClass("A", [
      Field("x", Var("y"))
    ]),
    PartialClass("A", [
      Field("y", Var("x"))
    ])
  ])

signature

  sorts ID = string

  sorts Class constructors
    PartialClass : ID * list(Member) -> Class

  sorts Member constructors
    Field : ID * Exp -> Member

  sorts Exp constructors
    Var : ID -> Exp

  relations
    var: string
    class : string -> scope

  name-resolution
    labels P E

rules

  programOk : list(Class)

  programOk(classes) :-
    classesOk(new, classes).

rules

  classesOk maps classOk(*, list(*))
  classOk : scope * Class

  classOk(s, PartialClass(x, members)) :- {s' pcs}
    new s', s' -P-> s,
    !class[x, s'] in s,
    query class
      filter P*
        and { x' :- x' == x }
      min $ < P
      in s |-> pcs,
    importPartials(pcs, s'),
    membersOk(s', members).

rules

  importPartials maps importPartial(list(*), *)
  importPartial : (path * (string * scope)) * scope

  importPartial((_, (_, s)), s).

  importPartial((_, (_, s')), s) :-
    s -E-> s'.

rules

  membersOk maps memberOk(*, list(*))
  memberOk : scope * Member

  memberOk(s, Field(x,e )) :-
    !var[x] in s,
    expOk(s, e).

rules

  expOk : scope * Exp

  expOk(s, Var(x)) :-
    query var
      filter P* E?
        and { x' :- x' == x }
      min$ < P, $ < E, E < P
        and true
      in s |-> [_].
