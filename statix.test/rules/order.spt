module rules/order

language StatixLang

// static

test overlapping, orderable rules succeed [[
  module test
  rules
    f : int * int
    f(_, 2).
    f(1, _).
    f(_, _).
    f(1, 2).
]] analysis succeeds

test overlapping, non-orderable rules fails [[
  module test
  rules
    f : int * int
    f(1, a).
    f(1, b).
]] analysis fails

// dynamic

test match most specific rule [[
  resolve f(1, 2)
  rules
    f : int * int
    f(1, _) :- false.
    f(_, _) :- false.
    f(1, 2) :- true.
    f(_, 2) :- false.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match left-specific rule [[
  resolve f(1, 4)
  rules
    f : int * int
    f(1, _) :- true.
    f(_, 2) :- false.
    f(1, 2) :- false.
    f(_, _) :- false.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match right-specific rule [[
  resolve f(3, 2)
  rules
    f : int * int
    f(1, _) :- false.
    f(_, 2) :- true.
    f(1, 2) :- false.
    f(_, _) :- false.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match least specific rule [[
  resolve f(3, 1)
  rules
    f : int * int
    f(1, 2) :- false.
    f(_, 2) :- false.
    f(1, _) :- false.
    f(_, _) :- true.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match left-specific rule with as-patterns [[
  resolve f([3], [1])
  rules
    f : list(int) * list(int)
    f(_, x@[_]) :- false.
    f(x@[_], _) :- true.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match right-specific rule with as-patterns [[
  resolve f([], [1])
  rules
    f : list(int) * list(int)
    f(_, x@[_]) :- true.
    f(x@[_], _) :- false.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test prefer constant over non-linear variable [[
resolve f(8, 8)
  rules
    f: int * int
    f(x, x) :- false.
    f(_, 8) :- true.
]] analysis succeeds
   run evaluate-test to SUCCEEDS()
