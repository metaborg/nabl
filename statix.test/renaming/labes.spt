module renaming/labels

language StatixLang

test rename label from dec [[
resolve {}
  programOk([
    PartialClass("A", [
      Field("x", Var("y"))
    ]),
    PartialClass("A", [
      Field("y", Var("x"))
    ])
  ])

signature

  sorts ID = string

  sorts Class constructors
    PartialClass : ID * list(Member) -> Class

  sorts Member constructors
    Field : ID * Exp -> Member

  sorts Exp constructors
    Var : ID -> Exp

  namespaces
    Clazz : ID
    Var   : ID

  relations
    class : occurrence -> scope

  name-resolution
    labels [[Po]] E
    resolve Clazz filter Po* min $ < Po
    resolve Var filter Po*(E|e) min $ < Po, $ < E, E < Po

rules

  programOk : list(Class)

]] run rename-test(|#1, "P") to [[
resolve {}
  programOk([
    PartialClass("A", [
      Field("x", Var("y"))
    ]),
    PartialClass("A", [
      Field("y", Var("x"))
    ])
  ])

signature

  sorts ID = string

  sorts Class constructors
    PartialClass : ID * list(Member) -> Class

  sorts Member constructors
    Field : ID * Exp -> Member

  sorts Exp constructors
    Var : ID -> Exp

  namespaces
    Clazz : ID
    Var   : ID

  relations
    class : occurrence -> scope

  name-resolution
    labels P E
    resolve Clazz filter P* min $ < P
    resolve Var filter P*(E|e) min $ < P, $ < E, E < P

rules

  programOk : list(Class)
]]

test rename label from dec [[
resolve {}
  programOk([
    PartialClass("A", [
      Field("x", Var("y"))
    ]),
    PartialClass("A", [
      Field("y", Var("x"))
    ])
  ])

signature

  sorts ID = string

  sorts Class constructors
    PartialClass : ID * list(Member) -> Class

  sorts Member constructors
    Field : ID * Exp -> Member

  sorts Exp constructors
    Var : ID -> Exp

  namespaces
    Clazz : ID
    Var   : ID

  relations
    class : occurrence -> scope

  name-resolution
    labels Po E
    resolve Clazz filter Po* min $ < [[Po]]
    resolve Var filter Po*(E|e) min $ < Po, $ < E, E < Po

rules

  programOk : list(Class)

]] run rename-test(|#1, "P") to [[
resolve {}
  programOk([
    PartialClass("A", [
      Field("x", Var("y"))
    ]),
    PartialClass("A", [
      Field("y", Var("x"))
    ])
  ])

signature

  sorts ID = string

  sorts Class constructors
    PartialClass : ID * list(Member) -> Class

  sorts Member constructors
    Field : ID * Exp -> Member

  sorts Exp constructors
    Var : ID -> Exp

  namespaces
    Clazz : ID
    Var   : ID

  relations
    class : occurrence -> scope

  name-resolution
    labels P E
    resolve Clazz filter P* min $ < P
    resolve Var filter P*(E|e) min $ < P, $ < E, E < P

rules

  programOk : list(Class)
]]